#name: lluchmk.Cache.Core NuGet pacakge
name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

# Run on commits on master branch
trigger:
  - master
  - yaml_pipeline

variables:
  buildConfiguration: Release

jobs:
- job: Build
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: set
    displayName: 'Show variables'

  - script: dotnet restore
    displayName: 'Restore packages'

  - script: dotnet build --configuration $(buildConfiguration) --no-restore
    displayName: 'Build $(buildConfiguration)'

#  - task: DotNetCoreCLI@2
#    displayName: 'Test'
#    inputs:
#      command: test
#      projects: '**/*Tests/*.csproj'
#      arguments: '--configuration $(buildConfiguration)'
#      publishTestResults: true 

  - task: DotNetCoreCLI@2
    displayName: 'Pack'
    inputs:
      command: pack
      packagesToPack: 'Cache.Core/Cache.Core.csproj'
      #versioningScheme: byPrereleaseNumber
      #majorVersion: '0'
      #minorVersion: '1'
      #patchVersion: '0'
      #packTimezone: 'utc'
      versioningScheme: byBuildNumber

  - task: PublishBuildArtifacts@1
    displayName: 'Store artifact'
    condition: succeeded()
    # If allowing more than one branch we could publish or deploy to different feeds
    #condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    inputs:
      artifactname: 'NuGetPackage'
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
  - powershell: echo "##vso[task.setvariable variable=teamProject;isOutput=true]$env:SYSTEM_TEAMPROJECT"
    name: setTeamProject
  - powershell: echo "##vso[task.setvariable variable=buildNumber;isOutput=true]$env:BUILD_BUILDNUMBER"
    name: setBuildNumber
  - powershell: echo "##vso[task.setvariable variable=jobStatus;isOutput=true]$env:AGENT_JOBSTATUS"
    name: setJobStatus
  - powershell: echo "##vso[task.setvariable variable=collectionUri;isOutput=true]$env:SYSTEM_COLLECTIONURI"
    name: setCollectionUri
  - powershell: echo "##vso[task.setvariable variable=buildId;isOutput=true]$env:BUILD_BUILDID"
    name: setBuildId

  # Moved to a release pipeline
  #- task: NuGetCommand@2
  #  displayName: 'Push to NuGet.org'
  #  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  #  inputs:
  #    command: push
  #    nugetFeedType: external
  #    publishFeedCredentials: 'NuGetOrg'
  #    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'

- job: Notify
  dependsOn: Build
  pool: server
  variables:
    teamProject: $[ dependencies.Build.outputs['setTeamProject.teamProject'] ]
    buildNumber: $[ dependencies.Build.outputs['setBuildNumber.buildNumber'] ]
    jobStatus: $[ dependencies.Build.outputs['setJobStatus.jobStatus'] ]
    collectionUri: $[ dependencies.Build.outputs['setCollectionUri.collectionUri'] ]
    buildId: $[ dependencies.Build.outputs['setBuildId.buildId'] ]
    message: |
      {
        "text": "New build on $(teamProject): $(buildNumber).
        Status: $(jobStatus)
        <$(collectionUri)/$(teamProject)/_build/results?buildId=$(buildId)&view=logs|Details>"
      }
    mySimpleVar: simple var value
    "my.dotted.var": dotted var value
    "my var with spaces": var with spaces value
    longvar: |
      asdasfeesacsdas
  steps:
  - task: InvokeRESTAPI@1
    inputs:
      connectionType: connectedServiceName
      serviceConnection: SlackWebHook
      method: POST
      body: $(message)